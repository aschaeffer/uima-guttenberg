package de.hda.gutti;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.uima.UIMAException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.uimafit.component.xwriter.XWriter;
import org.xml.sax.SAXException;

import de.hda.gutti.analysis.CommaSectionCounter;
import de.hda.gutti.domains.AnnotatorConfig;
import de.hda.gutti.services.PlainTextCollectionReader;
import de.hda.gutti.util.UuidFileNamer;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/context/uima-context.xml" })
public class PipelineTest implements ApplicationContextAware {

	/**
	 * Test objective.
	 */
	private final Pipeline pipe = new Pipeline();

	/**
	 * The ApplicationContext.
	 */
	private ApplicationContext applicationContext;

	@Autowired
	private PlainTextCollectionReader plainTextCollectionReader;

	private final Logger logger = LoggerFactory.getLogger(PipelineTest.class);

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}

	@Test
	public final void firstTest() throws UIMAException, IOException, SAXException {
		try {
			// Building a pipeline, enable uimafit spring features and create type system.
			pipe.enableSpringFeatures(applicationContext);
			pipe.createTypeSystemDescription("desc.TypeSystem", "PipelineTest", "Generated by PipelineTest", "h-da", "1.0");
			
			// Comma Section Counter Annotator
			AnnotatorConfig commaSectionCounterConfig = new AnnotatorConfig();
			pipe.create(CommaSectionCounter.class, commaSectionCounterConfig);
			// pipe.create(CommaSectionCounter.class);

//			// XMI Writer (writes document to a xmi file)
//			Map<String, Object> xWriterAnnotatorConfig = new HashMap<String, Object>();
//			xWriterAnnotatorConfig.put(XWriter.PARAM_OUTPUT_DIRECTORY_NAME, "target/");
//			xWriterAnnotatorConfig.put(XWriter.PARAM_XML_SCHEME_NAME, XWriter.XMI);
//			xWriterAnnotatorConfig.put(XWriter.PARAM_FILE_NAMER_CLASS_NAME, UuidFileNamer.class.getName());
//			pipe.create(XWriter.class, xWriterAnnotatorConfig);
//			System.out.println("XWriter");
//
//			// Output TypeSystemDescription to XML File.
//			pipe.getTypeSystemDescription().toXML(new FileOutputStream("TypeSystem.xml"));
//
//			// Run pipeline
//			pipe.run(plainTextCollectionReader);
		} catch (Exception e) {
			logger.error("error: ", e);
		}
	}

}
