package de.hda.gutti;

import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.uima.UIMAException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.uimafit.component.xwriter.XWriter;
import org.xml.sax.SAXException;

import de.hda.gutti.analysis.CommaSectionCounter;
import de.hda.gutti.domains.AnnotatorConfig;
import de.hda.gutti.services.PlainTextCollectionReader;
import de.hda.gutti.util.UuidFileNamer;
import de.tudarmstadt.ukp.dkpro.core.ngrams.NGramAnnotator;
import de.tudarmstadt.ukp.dkpro.core.stanfordnlp.StanfordParser;
import de.tudarmstadt.ukp.dkpro.core.stanfordnlp.StanfordSegmenter;
import de.tudarmstadt.ukp.dkpro.core.tokit.ParagraphSplitter;
import edu.stanford.nlp.trees.PennTreebankLanguagePack;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/context/uima-context.xml" })
public class PipelineTest implements ApplicationContextAware {

	/**
	 * Test objective.
	 */
	private final Pipeline pipe = new Pipeline();

	/**
	 * The ApplicationContext.
	 */
	private ApplicationContext applicationContext;

	@Autowired
	private PlainTextCollectionReader plainTextCollectionReader;

	private final Logger logger = LoggerFactory.getLogger(PipelineTest.class);

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}

	@Test
	public final void defaultPipeline() throws UIMAException, IOException, SAXException {
		try {

			// Building a pipeline

			// enable uimafit spring features 
			pipe.enableSpringFeatures(applicationContext);
			// create type system
			pipe.createTypeSystemDescription("desc.TypeSystem", "PipelineTest", "Generated by PipelineTest", "h-da", "1.0");

			// append the Stanford Segmenter
			pipe.create(StanfordSegmenter.class);

			// append the Stanford Segmenter
			pipe.create(ParagraphSplitter.class);

			// NGramAnnotator (dkpro) for ngrams with up to 5 words within a sentence
			AnnotatorConfig nGramAnnotatorConfig = new AnnotatorConfig();
			nGramAnnotatorConfig.put(NGramAnnotator.PARAM_N, 5);
			pipe.create(NGramAnnotator.class, nGramAnnotatorConfig);

			// Stanford Parser (German)
			/*
			AnnotatorConfig stanfordParserAnnotatorConfig = new AnnotatorConfig();
			stanfordParserAnnotatorConfig.put(StanfordParser.PARAM_MODEL_LOCATION, "classpath:/de/tudarmstadt/ukp/dkpro/core/stanfordnlp/lib/lexparser-de-pcfg.ser.gz");
			stanfordParserAnnotatorConfig.put(StanfordParser.PARAM_LANGUAGE, PennTreebankLanguagePack.class.getName());
			stanfordParserAnnotatorConfig.put(StanfordParser.PARAM_CREATE_CONSTITUENT_TAGS, true);
			stanfordParserAnnotatorConfig.put(StanfordParser.PARAM_CREATE_DEPENDENCY_TAGS, true);
			pipe.create(StanfordParser.class, stanfordParserAnnotatorConfig);
			*/

			// Comma Section Counter Annotator
			// AnnotatorConfig commaSectionCounterConfig = new AnnotatorConfig();
			// pipe.create(CommaSectionCounter.class, commaSectionCounterConfig);
			pipe.create(CommaSectionCounter.class);

			// XMI Writer (writes document to a xmi file)
			AnnotatorConfig xWriterAnnotatorConfig = new AnnotatorConfig();
			xWriterAnnotatorConfig.put(XWriter.PARAM_OUTPUT_DIRECTORY_NAME, "target/");
			xWriterAnnotatorConfig.put(XWriter.PARAM_XML_SCHEME_NAME, XWriter.XMI);
			xWriterAnnotatorConfig.put(XWriter.PARAM_FILE_NAMER_CLASS_NAME, UuidFileNamer.class.getName());
			pipe.create(XWriter.class, xWriterAnnotatorConfig);

			// Output TypeSystemDescription to XML File.
			pipe.getTypeSystemDescription().toXML(new FileOutputStream("TypeSystem.xml"));

			// Run pipeline
			pipe.run(plainTextCollectionReader);

		} catch (Exception e) {
			logger.error("error: ", e);
		}
	}

}
